name: CI / CD

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      db:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: smart_task_api
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u laravel -plaravel"
          --health-interval=5s --health-timeout=5s --health-retries=20
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s --health-timeout=5s --health-retries=20

    strategy:
      fail-fast: false
      matrix:
        php: [ '8.2', '8.3' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: composer
          extensions: mbstring, intl, zip, pcntl, pdo_mysql, redis
          coverage: xdebug

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            vendor
            ~/.composer/cache
          key: composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ matrix.php }}-

      - name: Install Composer deps
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Copy environment
        run: cp .env.example .env

      - name: Configure .env for CI
        run: |
          php -r "file_put_contents('.env', preg_replace('/^DB_CONNECTION=.*/m','DB_CONNECTION=mysql', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_HOST=.*/m','DB_HOST=127.0.0.1', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_PORT=.*/m','DB_PORT=3306', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_DATABASE=.*/m','DB_DATABASE=smart_task_api', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_USERNAME=.*/m','DB_USERNAME=laravel', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^DB_PASSWORD=.*/m','DB_PASSWORD=laravel', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^CACHE_DRIVER=.*/m','CACHE_DRIVER=redis', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^SESSION_DRIVER=.*/m','SESSION_DRIVER=redis', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^QUEUE_CONNECTION=.*/m','QUEUE_CONNECTION=redis', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^REDIS_HOST=.*/m','REDIS_HOST=127.0.0.1', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/^REDIS_PORT=.*/m','REDIS_PORT=6379', file_get_contents('.env')));"

      - name: Generate key
        run: php artisan key:generate

      - name: Wait for DB
        run: |
          for i in {1..30}; do
            mysqladmin ping -h 127.0.0.1 -u laravel -plaravel && break
            echo "Waiting for MySQL... ($i)"; sleep 2;
          done

      - name: Migrate & seed
        run: php artisan migrate --seed --force

      - name: Run PHPUnit (with coverage)
        run: php artisan test --coverage-clover=coverage.xml

      - name: Generate Swagger (OpenAPI)
        run: php artisan l5-swagger:generate

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.php }}
          path: coverage.xml

      - name: Upload Swagger JSON/HTML
        uses: actions/upload-artifact@v4
        with:
          name: swagger-docs-${{ matrix.php }}
          path: public/docs

  docker:
    name: Build & Push Docker image (GHCR)
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
